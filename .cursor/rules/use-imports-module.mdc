---
description: Use `#imports` module to import WXT APIs
alwaysApply: false
---
# Use Imports Module

You should use `#imports` module to import WXT API.

## What it is?

- Definition: `#imports` allows you to import all WXT APIs in one go, without having to remember the specific module paths.

- Implementation Mechanism: `#imports` does not exist in the file system. During the build, the packaging tool will automatically split it into the real path of each API, without affecting tree-shaking and performance.

- API Lookup: If you want to find the complete import path of an API, you can open the `.wxt/types/imports-module.d.ts` file in the project. This file is generated by the build tool.

## How to use it?

  ```typescript
  // old
  import { browser } from 'wxt/browser';
  import { createShadowRootUi } from 'wxt/utils/content-script-ui/shadow-root';
  import { defineContentScript } from 'wxt/utils/define-content-script';
  import { injectScript } from 'wxt/utils/inject-script';

  // new, recommended
  import { browser, createShadowRootUi, defineContentScript, injectScript } from '#imports';
  ```

## Unit Test Mock Method

When mocking with Vitest, you should mock the real path, not the `#imports` Mock. For example:

  ```typescript
  import { injectScript } from '#imports';
  import { vi } from 'vitest';

  vi.mock('wxt/utils/inject-script');
  const injectScriptMock = vi.mocked(injectScript);
  injectScriptMock.mockReturnValueOnce(...);
  ```

## Reference
[1] https://wxt.dev/blog/2024-12-06-using-imports-module.html
